{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/useController.ts","../../src/logic/getInputValue.ts","../../src/controller.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/regenerator-runtime/runtime.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName","React.useContext","useController","rules","onFocus","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperties","onBlur","onChange","meta","invalid","props","as","render","rest","componentProps","React.cloneElement","React.createElement","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","_asyncToGenerator","fn","self","this","args","arguments","apply","runtime","Op","prototype","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","Context","_invoke","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","constructor","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"static/js/0.7f770854.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}